draft a project requirement document by putting yourself in the shoes of the user and noting down features they need.

then using the project requirement document, draw a prototype



Building an Age Calculator

PyQt6.QtWidget QApplication, Qlabel, QWidget, QGridLayout, QlineEdit, QPushButton

child class of QWidget

init
qgrid
Qlabel name
QlineEdit name
Qlabel dob
QlineEdit dob
grid.addwidget labebl, 0,0
grid.addwidget lineedit, 0,1
grid.addwidget labebl, 1,0
grid.addwidget lineeidt, 1,1

app
import sys
QApplication(sys.argv)
app.show
sys.exit(QApplication.exec())

super().__init__()     This is used when you want add original method to the new method instead of overwriting the old with new method

self.setLayout(grid)

QPushButton()
output QLabel
grid.addwidget button, 2,0, 1, 2    The extra 1 and 2 means span across 1 row and 2 columns

grid.addwidget output, 3,0, 1, 2

button.clicked.connect(self.calculate property)

def calculate property
import datetime
datetime.now.year
self.QlineEdit dob.text()
self.output QLabel
self.QlineEdit name
year of birth .strptime(dob, %m/%d/%y).date().year

self.setWindowTitle




Building a Student Management System

QMainWindow   Allows adding bars (Menu, Tool, Status)

self.menuBar.addMenu("&item")

PyQT6.QtGui import QAction
QAction("submenue", self)
menu item.addAction(QAction("submenue"))


QTableWidget
setColumn(no.of column)
setHorizontalHeaderLabels((headers))

setCentralWidget(table)

loaddata method
slef.table

import sqlite3
.connect(db)
.execute(SELECT FROM students)

setRowCount(0)  makes sure to overwrite the table instead of adding to it. Its like setting the cursor to start in TXT files.

for row no, row data in enumerate SQL Data:
    insertRow(row no)
    for col no, cell data in enumerate row data:
        setItem(row no, col no, QTableWidgetItem(str(data))

setVerticalHeader().setVisible(False)


.triggered.connect(insert)

def insert
    InsertDialog()
    exec()

Class InsertDialog(QDialog)
setWindowTitle
fixedwidht
fixedWidth

QVBOxLayout

QLineEdit name
setPlaceHolderText
addWidget

QComboBox list of courses Bio Math physics chem

mobile

button
connect(add student)

setLayout


def add student
connect(db)
.cursor()
.execute(INSERT INTO, (name course, mobile))

name.text()
course.itemText(course.currentIndex())
mobile.text()

.commit
cursor.close()
connection.close()
sms.load_data()


QtCore import QT

query
connection
cursor
execute(WHERE name = ?, (name,))
store = list(result)

sms.table.findItems(name, QT.mathflag.matchfixedstring
for resutl in results
    .table.result(.row(), 1), setSelected(True)

.close
